; load kernel

RPL0 equ 00b
RPL1 equ 01b
RPL2 equ 10b
RPL3 equ 01b
TI_GDT equ 000b
TI_LDT equ 100b
CODE_SELECTOR equ (1 << 3) | TI_GDT | RPL0
DATA_SELECTOR equ (2 << 3) | TI_GDT | RPL0
PTE_ATTR_P equ 1
PTE_ATTR_RW equ 10b
PTE_ATTR_U equ 100b

section mbr vstart=0x90000

BASE_ADDRESS equ $
GDT_BASE: dd 0x0
          dd 0x0

CODE_DESC: dd 0x0000FFFF
           dd 0x00CF9800

DATA_DESC: dd 0x0000FFFF
           dd 0x00CF9200

dd 61 dup(0)
dd 61 dup(0)
; 64 segment descriptor

; memory segments count
ARDS_COUNT equ $ - BASE_ADDRESS
ards_count: dd 0x0
ARDS_BASE equ $ - BASE_ADDRESS
ards_base:
; [0x200+4, 0x400) record memory segments
times 0x400-($-$$) db 0

begin_loader:
  mov ax, 0x9000
  mov ds, ax

load_kernel:
  mov cx, 240        ; sectors count
  mov ebx, 0x500     ; address
  mov di, 5          ; begin sector
  mov word [ds:block_count], 128
  mov word [ds:buffer_addr_offset], 0
  mov word [ds:buffer_addr_segment], 0x50
  mov [ds:sector_start], di

.load_kernel_loop:
  mov ah, 42h
  mov dl, 0x80
  mov si, disk_address_packet 
  int 13h
  jc load_kernel

  mov ax, [ds:block_count]
  add di, ax
  mov [ds:sector_start], di
  sub cx, ax
  cmp cx, 0
  je .load_success
  cmp cx, 128     ; max number of sector to read one time
  jb .remaining_sectors_below_128
  mov word [ds:block_count], 128
  jmp .handle_address
.remaining_sectors_below_128:
  mov [ds:block_count], cx
.handle_address:
  mov dx, 512
  mul dx
  shl edx, 16
  and eax, 0xffff
  add eax, edx
  add eax, ebx          ; new address
  ; new address must be 0x***00
  ; transform to 0x***0:0x0
  ; after read data, end address is 0x***0:0xffff
  shr eax, 4
  mov word [ds:buffer_addr_offset], 0
  mov [ds:buffer_addr_segment], ax
  jmp .load_kernel_loop

.load_success:
  jmp read_memory_info

disk_address_packet:
  db 0x10
  db 0x0
block_count:
  dw 128
buffer_addr_offset:
  dw 0x500
buffer_addr_segment:
  dw 0x0
sector_start:
  dq 0x05

read_memory_info:
  ; read memory info
  mov ax, cs
  mov es, ax
  mov ebx, 0
  mov di, ARDS_BASE
  mov ecx, 20
  mov edx, 0x534d4150
  mov word [ds:ARDS_COUNT], 0
.read_memoy_info_loop:
  mov ecx, 20
  mov eax, 0xE820
  int 0x15
  jc read_memory_info
  add di, cx
  inc word [ds:ARDS_COUNT]
  cmp ebx, 0
  jnz .read_memoy_info_loop

  ; disable bios interrupt
  ; my screen keeps flickering after open protect mode
  ; disable bios interrupt can solve this problem
  cli
  cld
  ; open A20
  in al, 0x92
  or al, 0000_0010B
  out 0x92, al

  ; load GDT
  lgdt [gdt_ptr_address]

  ; open protect mode
  mov eax, cr0
  or eax, 0x1
  mov cr0, eax

  jmp dword CODE_SELECTOR:p_mode_start

[bits 32]
p_mode_start:
  mov ax, DATA_SELECTOR
  mov ds, ax
  mov es, ax
  mov fs, ax
  mov gs, ax
  mov ss, ax

  mov eax, 0x90000
  mov esp, eax


  ; setup memory page table
  ; root page 0x100000
  mov eax, 0x100000
  push eax
  call clean_page
  pop eax

  mov eax, 0x101000
  push eax
  call clean_page
  pop eax

  mov ebx, 0x100000
  or eax, PTE_ATTR_P | PTE_ATTR_RW ; pte attributes
  mov [ebx], eax         ; #0 pde
  mov [ebx + 768*4], eax   ; #768 pde

  ; map low 1M
  mov ebx, 0x101000
  mov ecx, 0x100
  mov edi, 0
  mov eax, 0
  or eax, PTE_ATTR_P | PTE_ATTR_RW
.map_low_1M_loop:
  mov [ebx + edi], eax
  add edi, 4
  add eax, 0x1000
  loop .map_low_1M_loop

  ; #769-#1022 pde
  mov ecx, 254
  mov edx, 0x102000
  mov ebx, 0x100000
  mov edi, 769 * 4
.map_high_pde_loop:
  push ecx
  push edx
  call clean_page
  pop edx
  mov eax, edx
  or eax, PTE_ATTR_P | PTE_ATTR_RW
  mov [ebx + edi], eax
  add edi, 4
  add edx, 0x1000
  pop ecx
  loop .map_high_pde_loop

  ; #1023 pde
  mov eax, 0x100000
  or eax, PTE_ATTR_P | PTE_ATTR_RW
  mov [ebx + 1023*4], eax

  add dword [gdt_ptr + 2], 0xc0000000

  mov eax, 0x100000
  mov cr3, eax
  mov eax, cr0
  or eax, 1 << 31
  mov cr0, eax

  lgdt [gdt_ptr]

  ; clean #0 pde
  mov ebx, 0xfffff000
  mov dword [ebx], 0

  mov eax, 0xc0090000
  mov esp, eax
  xor eax, eax
  mov ebx, eax
  mov ecx, eax
  mov edx, eax
  mov esi, eax
  mov edi, eax
  mov ebp, eax
  jmp 0xc0000500

clean_page:
  push ebp
  mov ebp, esp
  push ebx
  push edi
  
  mov ebx, [ebp + 8]  ; page address
  mov edi, 0
  mov ecx, 0x1000
  shr ecx, 2
  xor eax, eax
.clean_page_loop:
  mov [ebx + edi], eax
  add edi, 4
  loop .clean_page_loop

  pop edi
  pop ebx
  mov esp, ebp
  pop ebp
  ret

gdt_ptr_address equ $ - BASE_ADDRESS
gdt_ptr dw 511
        dd GDT_BASE
